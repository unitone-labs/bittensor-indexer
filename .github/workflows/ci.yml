name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
        features:
          - 'default'
          - 'postgres,sqlite'
          - 'json-storage'
          - 'postgres'
          - 'sqlite'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.88.0
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --features ${{ matrix.features }} -- -D warnings

      - name: Build
        run: cargo build --features ${{ matrix.features }} --verbose

      - name: Run tests
        run: cargo test --features ${{ matrix.features }} --verbose
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

      - name: Run property-based tests
        run: cargo test --features ${{ matrix.features }} test_property_based --verbose -- --ignored
        continue-on-error: true # Property tests can be flaky

      - name: Generate documentation
        run: cargo doc --features ${{ matrix.features }} --no-deps

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Test examples compilation and execution
  examples:
    name: Test Examples
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        example:
          - basic_usage
          - basic_pipeline
          - parallel_processing
          - error_handling

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-examples-${{ hashFiles('**/Cargo.lock') }}

      - name: Build example
        run: cargo build --example ${{ matrix.example }} --features default

      - name: Test example compilation with all features
        run: |
          cargo check --example ${{ matrix.example }} --features postgres,sqlite,json-storage
          cargo check --example ${{ matrix.example }} --features postgres
          cargo check --example ${{ matrix.example }} --features sqlite

      # Quick smoke test to ensure examples don't panic immediately
      - name: Quick run test (with timeout)
        run: |
          timeout 10s cargo run --example ${{ matrix.example }} --features default || true
        continue-on-error: true

  # Integration tests with different databases
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: indexer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-integration-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup test database
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          PGPASSWORD=postgres psql -h localhost -U postgres -d indexer_test -c "SELECT version();"

      - name: Run integration tests with PostgreSQL
        run: cargo test --test integration --features postgres --verbose
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/indexer_test

      - name: Run integration tests with SQLite
        run: cargo test --test integration --features sqlite --verbose

      - name: Run integration tests with JSON storage
        run: cargo test --test integration --features json-storage --verbose

  # Cross-platform compatibility check
  cross-platform:
    name: Cross Platform Check
    runs-on: ${{ matrix.os }}
    needs: test

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build for target
        run: cargo build --target ${{ matrix.target }} --features default

      - name: Run basic tests
        run: cargo test --target ${{ matrix.target }} --features default --lib
